import express from "express";
import { Payment } from "../controllers";
import { asyncHandler, authenticateJWT } from "../middlewares";

const router = express.Router();
const BASE_ROUTE = "/payment";

router.post("/createOrder", authenticateJWT, asyncHandler(Payment.createOrder));

/**
 * @swagger
 * /payment/verify:
 *   post:
 *     summary: Verify payment
 *     description: Verifies the payment using the provided `order_id`, `payment_id`, and `signature` from the Razorpay payment gateway.
 *     tags:
 *       - Payments
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - order_id
 *               - payment_id
 *               - signature
 *             properties:
 *               order_id:
 *                 type: string
 *                 example: "order_EKwxwAgItmmXdp"
 *                 description: "The unique identifier for the order"
 *               payment_id:
 *                 type: string
 *                 example: "pay_9A33kOkp4wY46t"
 *                 description: "The unique identifier for the payment"
 *               signature:
 *                 type: string
 *                 example: "8a319bb24a2e263ea7630c885b1f1502e5cb7351b074ef5b92b746d6f0bced7f"
 *                 description: "The signature generated by Razorpay for the payment"
 *     responses:
 *       200:
 *         description: Successfully verified payment
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "üëç"
 *                 message:
 *                   type: string
 *                   example: "Payment verified successfully"
 *       400:
 *         description: Invalid payment signature
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "üëé"
 *                 message:
 *                   type: string
 *                   example: "Invalid payment signature"
 *       500:
 *         description: Failed to verify payment
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "üëé"
 *                 message:
 *                   type: string
 *                   example: "Oh no, failed to verify payment"
 *                 error:
 *                   type: string
 *                   example: "Error message"
 */
router.post("/verify", asyncHandler(Payment.verifyPayment));
router.post("/webhook", asyncHandler(Payment.webhook));

const MODULE = {
  router,
  BASE_ROUTE,
};

export default MODULE;
